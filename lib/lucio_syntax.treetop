grammar Lucio

  rule lucio
    (line_break / space / list)* {
      def recurse(elements)
        elements.map do |e|
          e.nonterminal? ? recurse(e) : e.content
        end
      end

      def content
        recurse(elements)
      end
    }
  end

  rule list
    '(' (space / operator)? (line_break / list / space / number / string / boolean)* ')' {
      def content
        elements.map do |e| 
          begin
            e.content
          rescue
            e.text_value
          end
        end
      end
    }
  end

  rule space
    [ ]+ {
      def content
        [:space, text_value]
      end
    }
  end

  rule line_break
    [\r\n] / [\n] / [\r]
  end

  rule operator
    ([a-zA-Z] ([-]? [a-zA-Z0-9])* [?]?) / '+' / '-' / '/' / '*' {
      def content
        [:operator, text_value]
      end
    }
  end

  rule number
    decimal / integer
  end

	rule decimal
		integer '.' [0-9]+ {
      def content
        [:decimal, text_value.to_f]
      end
    }
	end

	rule integer
		'-'? unsigned_integer  {
      def content
        [:number, text_value.to_i]
      end
    }
	end

	rule unsigned_integer
		'0' / [1-9] [0-9]*
	end

  rule string
    '"' [^"]* '"'
  end

  rule boolean
    true / false
  end

  rule true
    'true'
  end

  rule false
    'false'
  end

end
