require 'lucio/grammar'

grammar Lucio

  rule lucio
    (whitespace / list)* <Grammar>
  end

  rule list
    lparen (whitespace / operator)? (list / string / number / boolean / whitespace)* rparen
  end

  rule rparen
    ')' {
      def content
        [:rparen, ')']
      end
    }
  end

  rule lparen
    '(' {
      def content
        [:lparen, '(']
      end
    }
  end

  rule whitespace
    [ \n\r\t]+ {
      def content
        [:whitespace, text_value]
      end
    }
  end

  rule operator
    ([a-zA-Z] ([-]? [a-zA-Z0-9])* [?]?) / '+' / '-' / '/' / '*' {
      def content
        [:operator, text_value]
      end
    }
  end

  rule number
    decimal / integer {
      def content
        [:number, content]
      end
    }
  end

  rule decimal
    integer '.' [0-9]+ {
      def content
        [:decimal, text_value.to_f]
      end
    }
  end

  rule integer
    '-'? unsigned_integer {
      def content
        [:integer, text_value.to_i]
      end
    }
  end

  rule unsigned_integer
    '0' / [1-9] [0-9]* {
      def content
        [:integer, text_value.to_i]
      end
    }
  end

  rule string
    '"' [^"]* '"' {
      def content
        [:whitespace, text_value]
      end
    }
  end
#'
  rule boolean
    true / false
  end

  rule true
    'true'
  end

  rule false
    'false'
  end

end

