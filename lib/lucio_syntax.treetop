require 'lucio/grammar'

grammar Lucio

  rule lucio
    (whitespace / (quote? list))* <Grammar>
  end

  rule list
    lparen (whitespace / operator)? (value)* rparen
  end

  rule value
    list / string / number / boolean / operator / vector / whitespace
  end

  rule quote
    '\''
  end

  rule rparen
    ')'
  end

  rule lparen
    '('
  end

  rule whitespace
    [ \n\r\t,]+
  end

  rule vector
    '[' (value)* ']'
  end

  rule operator
    ((([a-zA-Z] ([-]? [a-zA-Z0-9])* [?]?) !('+' / '-' / '/' / '*')) / ('+' / '-' / '/' / '*')) {
      def value
        text_value
      end
    }
  end

  rule number
    decimal / integer {
      def value
        f = text_value.to_f
        i = text_value.to_i
        (f - i == 0 ? i : f)
      end
    }
  end

  rule decimal
    integer '.' [0-9]+ {
      def value
        text_value.to_f
      end
    }
  end

  rule integer
    '-'? unsigned_integer
  end

  rule unsigned_integer
    '0' / [1-9] [0-9]*
  end

  rule string
    '"' [^"]* '"' {
      def value
        text_value
      end
    }
  end
#'
  rule boolean
    true / false
  end

  rule true
    'true'
  end

  rule false
    'false'
  end

end

